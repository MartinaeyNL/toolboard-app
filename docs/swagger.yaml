definitions:
  models.Dashboard:
    properties:
      createdAt:
        type: string
      description:
        type: string
      displayName:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
      widgets:
        items:
          $ref: '#/definitions/models.DashboardWidget'
        type: array
    type: object
  models.DashboardWidget:
    properties:
      createdAt:
        type: string
      dashboardId:
        type: integer
      description:
        type: string
      displayName:
        type: string
      id:
        type: integer
      location:
        $ref: '#/definitions/models.DashboardWidgetLocation'
      locationId:
        type: integer
      updatedAt:
        type: string
      widget:
        $ref: '#/definitions/models.Widget'
      widgetId:
        type: integer
    type: object
  models.DashboardWidgetLocation:
    properties:
      MaxWidth:
        type: integer
      createdAt:
        type: string
      height:
        type: integer
      id:
        type: integer
      maxHeight:
        type: integer
      minHeight:
        type: integer
      minWidth:
        type: integer
      updatedAt:
        type: string
      width:
        type: integer
      x:
        type: integer
      "y":
        type: integer
    type: object
  models.Widget:
    properties:
      id:
        type: string
      installPath:
        type: string
      widgetJSON:
        type: string
    type: object
info:
  contact: {}
paths:
  /dashboard:
    post:
      consumes:
      - application/json
      description: Stores the body dashboard object as a new entry in the database
      operationId: post-dashboard
      parameters:
      - description: The dashboard to create
        in: body
        name: dashboard
        required: true
        schema:
          $ref: '#/definitions/models.Dashboard'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Dashboard'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create a new Dashboard
      tags:
      - dashboard
  /dashboard/{id}:
    delete:
      description: Checks the ID in the database, and deletes that entry if present
      operationId: delete-dashboard
      parameters:
      - description: Dashboard ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
      summary: Delete a dashboard
      tags:
      - dashboard
  /dashboard/all:
    get:
      description: Returns one json object with all dashboards in the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Dashboard'
            type: array
        "500":
          description: Internal Server Error
      summary: Get all dashboards
      tags:
      - dashboard
  /widget/{id}:
    get:
      description: Returns a json object of the Widget with the smae ID
      parameters:
      - description: Widget ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Widget'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get widget by ID
      tags:
      - widget
  /widget/all:
    get:
      description: Returns one json object with all available widgets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Widget'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get all widgets, locally and externally
      tags:
      - widget
  /widget/embed/{id}/{file}:
    get:
      description: Returns html of the Widget with the smae ID
      parameters:
      - description: Widget ID
        in: path
        name: id
        required: true
        type: string
      - description: Optional file name
        in: path
        name: file
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Get HTML of a Widget
      tags:
      - widget
swagger: "2.0"
